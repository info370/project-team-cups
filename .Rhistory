# coefficients
model_lm$finalModel
# getting performance on test set (as root mean squared error (L2 norm), R^2, mean absolute error (L1 norm))
predict_boston_lm <- predict(model_lm, boston_test_x)
postResample(predict_boston_lm, boston_test_y$medv)
# creating grid of data to plot results for test set
grid <- df_boston_test %>%
gather_predictions(model_lm)
# getting important variales
varImp(model_lm)
ggplot(df_boston_test, aes(lstat, medv, color = rm)) +
geom_point() +
geom_line(data = grid, aes(y = pred))
View(totalFour)
summary(totalFour)
library(readr)
totalThree <- read_csv("~/Desktop/MHAdata/totalThree.csv")
View(totalThree)
library(readr)
MHA1 <- read_csv("~/Desktop/mhaData/MHA1.csv")
View(MHA1)
View(MHA1)
summary(MHA1)
testlm <- lm(APPRLNDVAL~LOTSQFT, data=MHA1)
testlm
plot(testlm)
ggplot(testlm)
plot(testlm)
library(plotly)
packageVersion('plotly')
df <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv")
df$hover <- with(df, paste(state, '<br>', "Beef", beef, "Dairy", dairy, "<br>",
"Fruits", total.fruits, "Veggies", total.veggies,
"<br>", "Wheat", wheat, "Corn", corn))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
p <- plot_geo(df, locationmode = 'USA-states') %>%
add_trace(
z = ~total.exports, text = ~hover, locations = ~code,
color = ~total.exports, colors = 'Purples'
) %>%
colorbar(title = "Millions USD") %>%
layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)',
geo = g
)
plot(APPRLNDVAL, LOTSQFT, data=MHA1)
?ggplot
ggplot(data = MHA1, aes(APPROLNDVAL, LOTSQFT))
ggplot(testlm)
testlm
plot(testlm)
library(plotly)
plot("APPRLNDVAL", "LOTSQFT", MHA1)
summary(testlm)
testlm2 <- lm(APPRLNDVAL~LOTSQFT+SITETYPE)
testlm2 <- lm(APPRLNDVAL~LOTSQFT+SITETYPE, data=MHA1)
summary(testlm2)
library(readr)
MHA2 <- read_csv("~/Desktop/mhaData/MHA2.csv")
View(MHA2)
summary(MHA1)
shiny::runApp('370/cupsProject')
if(!require(mlbench)){install.packages("mlbench"); require(mlbench)}
if(!require(tidyverse)){install.packages("tidyverse"); library(tidyverse)}
if(!require(modelr)){install.packages("modelr"); library(modelr)}
if(!require(ModelMetrics)){install.packages("ModelMetrics"); require(ModelMetrics)}
if(!require(recipes)){install.packages("recipes"); require(recipes)}
if(!require(DEoptimR)){install.packages("DEoptimR"); require(DEoptimR)}
if(!require(caret)){install.packages("caret"); require(caret)}
if(!require(dplyr)){install.packages("dplyr"); require(dplyr)}
if(!require(gam)){install.packages("gam"); require(gam)}
set.seed(370)
library(ggplot2)
library(dplyr)
require(broom)
# Zillow Neighborhood Prices Data
library(readr)
HomePrices <- read_csv("~/Downloads/Neighborhood_Zhvi_AllHomes.csv")
if(!require(mlbench)){install.packages("mlbench"); require(mlbench)}
if(!require(tidyverse)){install.packages("tidyverse"); library(tidyverse)}
if(!require(modelr)){install.packages("modelr"); library(modelr)}
if(!require(ModelMetrics)){install.packages("ModelMetrics"); require(ModelMetrics)}
if(!require(recipes)){install.packages("recipes"); require(recipes)}
if(!require(DEoptimR)){install.packages("DEoptimR"); require(DEoptimR)}
if(!require(caret)){install.packages("caret"); require(caret)}
if(!require(dplyr)){install.packages("dplyr"); require(dplyr)}
if(!require(gam)){install.packages("gam"); require(gam)}
set.seed(370)
library(ggplot2)
library(dplyr)
require(broom)
library(shiny)
library(tidyverse)
library(readr)
newYears <- read_csv("~/Desktop/neighborhood.all.data.csv")
View(newYears)
library(readr)
no_neighbo_all_data <- read_csv("~/Desktop/no.neighbo.all.data.csv")
View(no_neighbo_all_data)
oldYears <- no_neighbo_all_data
na.omit(oldYears)
na.omit(newYears)
mha_test_x <- newYears %>% dplyr::select(-TotalVal)
mha_test_y <- newYears %>% dplyr::select(TotalVal)
ctrl <- trainControl(method = "cv", number=5)
?trainControl
library(caret)
#split_proportion = 0.8
#outcome <- neighborhood.all.data %>% dplyr::select(TotalVal)
#train_ind <- createDataPartition(outcome$TotalVal, p = split_proportion, list = FALSE)
#mha_train <- neighborhood.all.data[train_ind,]
#mha_test <- neighborhood.all.data[-train_ind,]
mha_test_x <- newYears %>% dplyr::select(-TotalVal)
mha_test_y <- newYears %>% dplyr::select(TotalVal)
ctrl <- trainControl(method = "cv", number=5)
mha_model_lm <- train(TotalVal ~ RollYr + CurrentZoning + LOTSQFT + UV_NAME,
data = oldYears,
method = "lm",
trControl=ctrl)
#split_proportion = 0.8
#outcome <- neighborhood.all.data %>% dplyr::select(TotalVal)
#train_ind <- createDataPartition(outcome$TotalVal, p = split_proportion, list = FALSE)
#mha_train <- neighborhood.all.data[train_ind,]
#mha_test <- neighborhood.all.data[-train_ind,]
mha_test_x <- newYears %>% dplyr::select(-TotalVal)
mha_test_y <- newYears %>% dplyr::select(TotalVal)
ctrl <- trainControl(method = "cv", number=5)
mha_model_lm <- train(TotalVal ~ RollYr + CurrentZoning + LOTSQFT,
data = oldYears,
method = "lm",
trControl=ctrl)
mha_model_lm$finalModel
predict_mha_lm <- predict(mha_model_lm, mha_test_x)
postResample(predict_mha_lm, mha_test_y$TotalVal)
grid <- mha_test %>% gather_predictions(mha_model_lm)
mha_test <- newYears
#split_proportion = 0.8
#outcome <- neighborhood.all.data %>% dplyr::select(TotalVal)
#train_ind <- createDataPartition(outcome$TotalVal, p = split_proportion, list = FALSE)
#mha_train <- neighborhood.all.data[train_ind,]
#mha_test <- neighborhood.all.data[-train_ind,]
mha_test <- newYears
mha_test_x <- newYears %>% dplyr::select(-TotalVal)
mha_test_y <- newYears %>% dplyr::select(TotalVal)
ctrl <- trainControl(method = "cv", number=5)
mha_model_lm <- train(TotalVal ~ RollYr + CurrentZoning + LOTSQFT,
data = oldYears,
method = "lm",
trControl=ctrl)
mha_model_lm$finalModel
predict_mha_lm <- predict(mha_model_lm, mha_test_x)
postResample(predict_mha_lm, mha_test_y$TotalVal)
grid <- mha_test %>% gather_predictions(mha_model_lm)
library(modelr)
---
title: "modelingYears"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(tidyverse)
library(caret)
library(modelr)
oldYears <- no_neighbo_all_data
na.omit(oldYears)
na.omit(newYears)
```
```{r cars}
#split_proportion = 0.8
#outcome <- neighborhood.all.data %>% dplyr::select(TotalVal)
#train_ind <- createDataPartition(outcome$TotalVal, p = split_proportion, list = FALSE)
#mha_train <- neighborhood.all.data[train_ind,]
#mha_test <- neighborhood.all.data[-train_ind,]
mha_test <- newYears
mha_test_x <- newYears %>% dplyr::select(-TotalVal)
mha_test_y <- newYears %>% dplyr::select(TotalVal)
ctrl <- trainControl(method = "cv", number=5)
mha_model_lm <- train(TotalVal ~ RollYr + CurrentZoning + LOTSQFT,
data = oldYears,
method = "lm",
trControl=ctrl)
mha_model_lm$finalModel
predict_mha_lm <- predict(mha_model_lm, mha_test_x)
postResample(predict_mha_lm, mha_test_y$TotalVal)
grid <- mha_test %>% gather_predictions(mha_model_lm)
varImp(mha_model_lm)
# ggplot(mha_test, aes(RollYr, TotalVal, color = 'red')) +
geom_point() +
geom_line(data = grid, aes(y = pred ))
```
mha_test <- newYears
mha_test_x <- newYears %>% dplyr::select(-TotalVal)
mha_test_y <- newYears %>% dplyr::select(TotalVal)
ctrl <- trainControl(method = "cv", number=5)
mha_model_lm <- train(TotalVal ~ RollYr + CurrentZoning + LOTSQFT,
data = oldYears,
method = "lm",
trControl=ctrl)
mha_model_lm$finalModel
predict_mha_lm <- predict(mha_model_lm, mha_test_x)
postResample(predict_mha_lm, mha_test_y$TotalVal)
grid <- mha_test %>% gather_predictions(mha_model_lm)
varImp(mha_model_lm)
# ggplot(mha_test, aes(RollYr, TotalVal, color = 'red')) +
geom_point() +
geom_line(data = grid, aes(y = pred ))
?geom_line
library(ggplot2)
geom_point() +
geom_line(data = grid, aes(y = pred ))
geom_point() +
geom_line(data = grid, aes(y = "pred" ))
geom_point() +
geom_line(data = grid, aes(y = pred ))
ggplot(mha_test, aes(RollYr, TotalVal, color = 'red')) +
geom_point() +
geom_line(data = grid, aes(y = pred ))
residuals(grid)
resid(grid)
plot(density(resid(grid)))
x <- resid(grid)
plot(density(resid(mha_model_lm)))
plot(resid(mha_model_lm)))
plot((resid(mha_model_lm))
plot(resid(mha_model_lm))
plot(resid(mha_model_lm))
qqnorm(resid(mha_model_lm))
qqline(resid(mha_model_lm))
qqline(resid(mha_model_lm))
resid(mha_model_lm)
plot(resid(mha_model_lm)) #A density plot
qqnorm(resid(mha_model_lm)) # A quantile normal plot - good for checking normality
library(readr)
SurveyResponses <- read_csv("~/Desktop/470 Survey (Responses) - Form Responses 1.csv")
View(SurveyResponses)
summary(SurveyResponses)
plot(SurveyResponses$`What year are you at UW?`, SurveyResponses$`Do you prefer old or new Suzzallo Cafe?`)
plot(SurveyResponses$`What year are you at UW?`, SurveyResponses$`Do you prefer old or new Suzzallo Cafe?`)
plot(count(SurveyResponses$`What year are you at UW?`), SurveyResponses$`Do you prefer old or new Suzzallo Cafe?`)
library(plotly)
p <- plot_ly(
x = c("giraffes", "orangutans", "monkeys"),
y = c(20, 14, 23),
name = "SF Zoo",
type = "bar"
)
library(ggplot2)
library(plotly)
p <- plot_ly(
x = c("giraffes", "orangutans", "monkeys"),
y = c(20, 14, 23),
name = "SF Zoo",
type = "bar"
)
p
plot(count(SurveyResponses$`What year are you at UW?`), SurveyResponses$`Do you prefer old or new Suzzallo Cafe?`)
p4 <- ggplot() + geom_bar(aes(y = c(10, 27, 27, 7), x = c( "Sophomore", "Junior", "Senior", "Grad"), fill = c(7, 11, 11, 4)), stat="identity")
p4
barplot(counts, main="Distribution of preferences on new Suz and old Suz",
xlab="number of responses", col=c("darkblue","red"))
counts <- c(10, 27, 27, 7)
barplot(counts, main="Distribution of preferences on new Suz and old Suz",
xlab="number of responses", col=c("darkblue","red"))
library(readr)
results <- read_csv("~/Desktop/Untitled spreadsheet - Sheet1.csv")
View(results)
p4 <- ggplot() + geom_bar(aes(y = total, x = year, fill = old) data=results, stat="identity")
p4 <- ggplot() + geom_bar(aes(y = total, x = year, fill = old), data=results, stat="identity")
p4
View(newYears)
shiny::runApp('Desktop')
library(shiny)
library(shinythemes)
if(!require(prophet)){install.packages("prophet"); require(prophet)}
if(!require(plotly)){install.packages("plotly"); require(plotly)}
if(!require(shinyWidgets)){install.packages("shinyWidgets"); require(shinyWidgets)}
library(shinyWidgets)
install.packages("shinyWidgets")
install.packages("shinyWidgets")
library(shinyWidgets)
runApp('Desktop')
install.packages("devtools")
library(devtools)
runApp('Desktop')
install.packages("shinyWidgets")
runApp('Desktop')
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(tidyverse)
library(caret)
library(modelr)
library(ggplot2)
oldYears <- no_neighbo_all_data
na.omit(oldYears)
na.omit(newYears)
library(shinyWidgets)
library(shinyWidgets)
version
library(shinyWidgets)
shiny::runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
shiny::runApp('Desktop')
runApp('Desktop')
split_proportion = 0.8
outcome_MCR <- mixedCommercialRes %>% dplyr::select(TotalVal)
train_ind_MCR <- createDataPartition(outcome$TotalVal, p = split_proportion, list = FALSE)
MCR_train <- mixedCommercialRes[train_ind,]
MCR_test <- mixedCommercialRes[-train_ind,]
MCR_test_x <- mixedCommercialRes %>% dplyr::select(-TotalVal)
MCR_test_y <- mixedCommercialRes %>% dplyr::select(TotalVal)
ctrl <- trainControl(method = "cv", number=5)
# Train model
MCR_model_lm <- train(TotalVal ~ RollYr + CurrentZoning + LOTSQFT + UV_NAME,
data = mixedCommercialRes,
method = "lm",
trControl=ctrl)
MCR_model_lm$finalModel
predict_MCR_lm <- predict(MCR_model_lm, MCR_test_x)
postResample(predict_MCR_lm, MCR_test_y$TotalVal)
grid_MCR <- MCR_test %>% gather_predictions(MCR_model_lm)
residual_MCR <- resid(MCR_model_lm)
# residuals
plot(resid(MCR_model_lm))
split_proportion = 0.8
outcome_MCR <- mixedCommercialRes %>% dplyr::select(TotalVal)
train_ind_MCR <- createDataPartition(outcome$TotalVal, p = split_proportion, list = FALSE)
MCR_train <- mixedCommercialRes[train_ind,]
MCR_test <- mixedCommercialRes[-train_ind,]
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
return(grid)
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('Desktop')
runApp('370/project-team-cups/appe.R')
runApp('370/project-team-cups/appe.R')
View(residential)
runApp('370/project-team-cups/appe.R')
runApp('370/project-team-cups/appe.R')
address <- 3901 FREMONT AVE N
address <- "3901 FREMONT AVE N"
address <- toupper(address)
# if (address %in% residential$ADDR_FULL) {
#   data <- residential
# } else if (address %in% commercial$ADDR_FULL) {
#   data <- commercial
# } else if (address %in% mixedCommercialRes$ADDR_FULL) {
#   data <- mixedCommercialRes
# } else if (address %in% industrial$ADDR_FULL) {
#   data <- industrial
# }
data <- neighborhood.all.data %>% filter(ADDR_FULL == address)
View(data)
runApp('370/project-team-cups/appe.R')
runApp('370/project-team-cups/appe.R')
runApp('370/project-team-cups/appe.R')
runApp('370/project-team-cups/appe.R')
runApp('370/project-team-cups/appe.R')
runApp('370/project-team-cups/appe.R')
runApp('370/project-team-cups/appe.R')
data <- neighborhood.all.data %>% filter(ADDR_FULL == address)
View(data)
if (data$ZONING == 'RSL/TC'| data$ZONING == 'SM/R-65'| data$ZONING == 'HR'| data$ZONING == 'SF 5000' | data$ZONING == 'LR3 PUD' | data$ZONING == 'LR3' ) {
model <- mha_model_lm
}
model.matrix
data <- data %>% filter(ADDR_FULL == address)
yr2017 <- data %>% filter(RollYr == '2017')
yr2017$RollYr <- 2018
yr2017$ZONING <- yr2017$MHA_ZONING
future <- rbind(data, yr2017)
future$ZONING <- gsub("M1", "", future$ZONING)
future$ZONING <- gsub("[(M)]", "", future$ZONING)
future$ZONING <- gsub("[()]", "", future$ZONING)
mha_test_x <- future %>% dplyr::select(-TotalVal)
mha_test_y <- future %>% dplyr::select(TotalVal)
data <- join(data, zoneFar, by="Existing_Z", type="inner")
View(data)
runApp('370/project-team-cups/appe.R')
runApp('370/project-team-cups/appe.R')
View(data)
future <- rbind(data, yr2017)
future$ZONING <- gsub("M1", "", future$ZONING)
future$ZONING <- gsub("[(M)]", "", future$ZONING)
future$ZONING <- gsub("[()]", "", future$ZONING)
mha_test_x <- future %>% dplyr::select(-TotalVal)
mha_test_y <- future %>% dplyr::select(TotalVal)
predict_mha_lm <- predict(model, mha_test_x)
postResample(predict_mha_lm, mha_test_y$TotalVal)
grid <- future %>% gather_predictions(model)
grid$RollYr <- as.numeric(grid$RollYr)
data <- data %>% filter(ADDR_FULL == address)
data <- join(data, zoneFar, by="Existing_Z", type="inner")
yr2017 <- data %>% filter(RollYr == '2017')
yr2017$RollYr <- 2018
yr2017$ZONING <- yr2017$MHA_ZONING
future <- rbind(data, yr2017)
future$ZONING <- gsub("M1", "", future$ZONING)
future$ZONING <- gsub("[(M)]", "", future$ZONING)
future$ZONING <- gsub("[()]", "", future$ZONING)
mha_test_x <- future %>% dplyr::select(-TotalVal)
mha_test_y <- future %>% dplyr::select(TotalVal)
predict_mha_lm <- predict(model, mha_test_x)
postResample(predict_mha_lm, mha_test_y$TotalVal)
grid <- future %>% gather_predictions(model)
grid$RollYr <- as.numeric(grid$RollYr)
ncol(yr2017)
ncol(data)
data <- data %>% filter(ADDR_FULL == address)
data <- join(data, zoneFar, by="Existing_Z", type="inner")
yr2017 <- data %>% filter(RollYr == '2017'
)
address <- toupper(address)
data <- neighborhood.all.data %>% filter(ADDR_FULL == address)
data <- data %>% filter(ADDR_FULL == address)
data <- join(data, zoneFar, by="Existing_Z", type="inner")
yr2017 <- data %>% filter(RollYr == '2017')
View(yr2017)
ncol(yr2017)
ncol(data)
yr2017$RollYr <- 2018
yr2017$ZONING <- yr2017$MHA_ZONING
future <- rbind(data, yr2017)
future <- rbind(data, yr2017)
future$ZONING <- gsub("M1", "", future$ZONING)
future$ZONING <- gsub("[(M)]", "", future$ZONING)
future$ZONING <- gsub("[()]", "", future$ZONING)
mha_test_x <- future %>% dplyr::select(-TotalVal)
mha_test_y <- future %>% dplyr::select(TotalVal)
predict_mha_lm <- predict(model, mha_test_x)
postResample(predict_mha_lm, mha_test_y$TotalVal)
grid <- future %>% gather_predictions(model)
grid$RollYr <- as.numeric(grid$RollYr)
runApp('370/project-team-cups/appe.R')
runApp('370/project-team-cups/appe.R')
runApp('370/project-team-cups/appe.R')
runApp('370/project-team-cups/appe.R')
runApp('370/project-team-cups/appe.R')
runApp('370/project-team-cups/appe.R')
runApp('370/project-team-cups/appe.R')
View(all.data)
runApp('370/project-team-cups/appe.R')
runApp('370/project-team-cups/appe.R')
runApp('370/project-team-cups/appe.R')
getwd()
getwd()
setwd("/Users/Joycie/370/project-team-cups")
getwd()
runApp('appe.R')
total.no.years <- read.csv("./data/finalDataNoYears.csv")
all.data <- read.csv('./data/dataYears13to17.csv')
neighborhood.all.data <- read.csv("./data/neighborhoodAllData.csv")
totalOldYears <- read_csv("./data/totalOldYears.csv")
totalNewYears <- read_csv("./data/totalNewYears.csv")
zoneFar <- read_csv("./data/zoneFar.csv")
zoneFarTwo <- read_csv("./data/zoneFar.csv")
colnames(zoneFar)[1] <- "Existing_Z"
residential <- neighborhood.all.data %>% filter (ZONING == 'RSL/TC'| ZONING == 'SM/R-65'| ZONING == 'HR'| ZONING == 'SF 5000' | ZONING == 'LR3 PUD' | ZONING == 'LR3')
mixedCommercialRes <- neighborhood.all.data %>% filter(ZONING == 'SM-NR 55/75 2.0'| ZONING == 'SM-NR-85'| ZONING == 'MR-RC'| ZONING == 'LR1' | ZONING == 'LR2 RC' | ZONING == 'LR3 RC')
industrial <- neighborhood.all.data %>% filter(ZONING == 'IC-65'| ZONING == 'IC-45')
commercial <- neighborhood.all.data %>% filter(ZONING == 'NC3-40'| ZONING == 'NC3P-40' | ZONING == 'NC2P-40' | ZONING == 'NC2P-30' | ZONING == 'NC2-40' | ZONING == 'NC3-65' | ZONING == 'NC3-65' | ZONING == 'NC3P-85 5.75' | ZONING == 'NC3P-65' | ZONING == 'NC1-40' | ZONING == 'NC1-65' | ZONING == 'NC1-30' | ZONING == 'NC3P-85' | ZONING == 'C1-65' | ZONING == 'C2-65'| ZONING == 'C1-40' | ZONING == 'NC2-65' | ZONING == 'NC2P-65' | ZONING == 'NC1P-30' | ZONING == 'NC3-85' | ZONING == 'NC3-125' | ZONING == 'NC2P-65 4.0'| ZONING == 'NC3-65 2.0'| ZONING == 'NC2P-65 3.0' |  ZONING == 'NC3P-85 2.0' | ZONING == 'NC3P-85 2.0' | ZONING == 'NC3P-85 2.0'| ZONING == 'NC3P-65 2.0' | ZONING == 'NC3P-65 4.0' | ZONING == 'NC3-30' | ZONING == 'C2-30'| ZONING == 'NC2-30' | ZONING == 'NC1P-40' | ZONING == 'C2-40'| ZONING == 'NC3P-65 3.0'| ZONING == 'NC3P-85 4.75' | ZONING == 'NC3-85 4.75' | ZONING == 'NC3P-160' | ZONING == 'NC2P-65 0.75' | ZONING == 'C1-30' | ZONING == 'C1-40 0.75')
residential <- join(residential, zoneFar, by="Existing_Z", type="inner")
residential <- residential[residential$TotalVal<=10000000,]
mixedCommercialRes <- join(mixedCommercialRes, zoneFar, by="Existing_Z", type="inner")
industrial <- join(industrial, zoneFar, by="Existing_Z", type="inner")
commercial <- join(commercial, zoneFar, by="Existing_Z", type="inner")
colnames(zoneFarTwo)[1] <- "ZONING"
runApp('appe.R')
runApp('appe.R')
runApp('appe.R')
runApp('appe.R')
rsconnect::setAccountInfo(name='joycieyu',
token='0BB1E31C4A38711B25C1F4DAAE09BA4E',
secret='<SECRET>')
install.packages('rsconnect')
install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='joycieyu',
token='0BB1E31C4A38711B25C1F4DAAE09BA4E',
secret='<SECRET>')
rsconnect::setAccountInfo(name='joycieyu',
token='0BB1E31C4A38711B25C1F4DAAE09BA4E',
secret='Y8Ecne6gjEHxVOJTUtmo0KpZqBNrxi9F6OEkooQB')
runApp('appe.R')
runApp()
